'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var booru = require('../booru');

module.exports = function (_booru) {
  _inherits(_class, _booru);

  function _class() {
    _classCallCheck(this, _class);

    return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
  }

  _createClass(_class, [{
    key: 'favorites',

    /**
     * `favorites#index`
     *
     * List favorites
     *
     * @param {Object} params Listing params
     * @returns {Promise} Resolves to server response
     */
    value: function favorites() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return this.get('favorites', params);
    }

    /**
     * `favorites#create`
     *
     * Add a post as a favorite
     *
     * @param {*} post_id Post id to favorite
     * @returns {Promise} Resolves to server response
     */

  }, {
    key: 'favorites_create',
    value: function favorites_create(post_id) {
      return this.post('favorites', { post_id: post_id });
    }

    /**
     * `favorites#destroy`
     *
     * Remove a post from favorites
     *
     * @param {*} id Post id to delete favorite
     * @returns {Promise} Resolves to server response
     */

  }, {
    key: 'favorites_destroy',
    value: function favorites_destroy(id) {
      return this.delete('favorites/' + id);
    }
  }]);

  return _class;
}(booru);